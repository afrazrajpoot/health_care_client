generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  firstName     String?
  lastName      String?
  phoneNumber   String?
  email         String?   @unique
  password      String?
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  physicianId    String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  refresh_expires_at Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
id              String             @id @default(cuid())
dob             DateTime
doi             DateTime
patientName     String
status          String
claimNumber     String
gcsFileLink     String
briefSummary    String?
whatsNew        Json?
blobPath        String?
patientQuizPage String?
fileName        String?
// Relations
summarySnapshot SummarySnapshot?
adl             ADL?
documentSummary DocumentSummary?
physicianId     String?
createdAt       DateTime           @default(now())
updatedAt       DateTime           @updatedAt
}
model SummarySnapshot {
  id           String    @id @default(cuid())
  dx           String
  keyConcern   String
  nextStep     String

  // Relation back to Document
  document     Document  @relation(fields: [documentId], references: [id])
  documentId   String    @unique
}

model ADL {
  id                 String    @id @default(cuid())
  adlsAffected       String
  workRestrictions   String

  // Relation back to Document
  document           Document  @relation(fields: [documentId], references: [id])
  documentId         String    @unique
}

model DocumentSummary {
  id        String    @id @default(cuid())
  type      String
  date      DateTime
  summary   String

  // Relation back to Document
  document  Document  @relation(fields: [documentId], references: [id])
  documentId String   @unique
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  email     String?
  action    String
  ipAddress String?
  userAgent String?
  path      String?
  method    String?
  timestamp DateTime @default(now())
}


model PatientQuiz {
id          String   @id @default(cuid())

patientName String?
dob         String?
doi         String?
lang        String
newAppt     String
appts       Json?
pain        Int
workDiff    String
trend       String
workAbility String
barrier     String
adl         Json     // Array stored as JSON for flexibility

createdAt   DateTime @default(now())
updatedAt   DateTime @updatedAt

}

model FailDocs{
  id          String   @id @default(cuid())
  reasson     String
  blobPath    String
  physicianId String?
}