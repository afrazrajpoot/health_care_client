generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  firstName     String?
  lastName      String?
  phoneNumber   String?
  email         String?     @unique
  password      String?
  role          String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  emailVerified DateTime?
  image         String?

 
  accounts      Account[]
  sessions      Session[]


}          

model Account {
  id                 String   @id @default(uuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  refresh_expires_at Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}



// Document Analysis Models
model Document {
  id                  String    @id @default(uuid())
  
  // File Information
  originalName        String
  fileSize            Int
  mimeType            String
  
  // Extracted Content
  extractedText       String    @db.Text  // Full document text
  pages               Int       @default(0)
  confidence          Float     @default(0.0)
  
  // Document AI Results
  entities            Json[]    // Extracted entities
  tables              Json[]    // Extracted tables
  formFields          Json[]    // Extracted form fields
  
  // Patient Information
  patientName         String?
  patientEmail        String?
  claimNumber         String?
  reportTitle         String?
  reportDate          DateTime?
  status              String    @default("normal") // urgent, normal, low
  
  // Analysis Results
  summary             String[]  // AI-generated summary points
  originalReport      String    @db.Text  // Complete original report text
  
  // Processing Metadata
  processingTimeMs    Int       @default(0)
  analysisSuccess     Boolean   @default(true)
  errorMessage        String?
  
  // Timestamps
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  alerts              Alert[]
  gcsFileLink   String?  // New field for GCS file link
  lastchanges String?
  @@map("documents")
}

model Alert {
  id          String    @id @default(uuid())
  
  // Alert Information
  alertType   String    // "Work Status Review", "Medical Urgency", "Follow-Up Required"
  title       String
  date        String
  status      String    // "urgent", "low priority", "normal"
  description String?   // Optional additional context
  
  // Relations
  documentId  String
  document    Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  // Metadata
  isResolved  Boolean   @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?   // User ID who resolved the alert
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("alerts")
}


model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  email      String?
  action     String
  ipAddress  String?
  userAgent  String?
  path       String?
  method     String?
  timestamp  DateTime @default(now())
}