generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  firstName     String?
  lastName      String?
  phoneNumber   String?
  email         String?   @unique
  password      String?
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  refresh_expires_at Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id               String    @id @default(uuid())
  originalName     String
  fileSize         Int
  mimeType         String
  extractedText    String
  pages            Int       @default(0)
  confidence       Float     @default(0.0)
  entities         Json[]
  tables           Json[]
  formFields       Json[]
  patientName      String?
  patientEmail     String?
  claimNumber      String?
  reportTitle      String?
  reportDate       DateTime?
  status           String    @default("normal")
  summary          String[]
  originalReport   String
  processingTimeMs Int       @default(0)
  analysisSuccess  Boolean   @default(true)
  errorMessage     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  gcsFileLink      String?

  // Changed to JSON so we can store arrays/objects
  lastchanges      String?     // String?
  // New deterministic outputs as JSON scalars
  complianceNudges Json?
  referrals        Json?

  // Keep alerts as relation to Alert model
  alerts           Alert[]

  // Leave actions for backward compatibility (optional)
  actions          Json?

  @@map("documents")
}

model Alert {
  id          String    @id @default(uuid())
  alertType   String
  title       String
  date        String
  status      String
  description String?
  documentId  String
  isResolved  Boolean   @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  document    Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  email     String?
  action    String
  ipAddress String?
  userAgent String?
  path      String?
  method    String?
  timestamp DateTime @default(now())
}
