generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  firstName     String?
  lastName      String?
  phoneNumber   String?
  email         String?    @unique
  password      String?
  role          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  emailVerified DateTime?
  image         String?
  physicianId   String?
  accounts      Account[]
  Document      Document[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  refresh_expires_at Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id              String           @id @default(cuid())
  dob             String?
  doi             String
  mode            String? @default("wc")
  patientName     String
  status          String
  claimNumber     String
  gcsFileLink     String
  briefSummary    String?
  whatsNew        Json?
  blobPath        String?
  fileName        String?
  reportDate      DateTime?
  physicianId     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  fileHash        String?          @db.VarChar(64)
  userId          String?
  adl             ADL?
  user            User?            @relation(fields: [userId], references: [id])
  documentSummary DocumentSummary?
  ur_denial_reason String?
  summarySnapshot SummarySnapshot?
  tasks           Task[]

  @@unique([fileHash, userId])
}

model SummarySnapshot {
  id                String   @id @default(cuid())
  dx                String
  keyConcern        String
  bodyPart          String
  nextStep          String
  urDecision        String?   // corresponds to 'ur-decision'
  recommended       String?   // recommended treatment plan
  aiOutcome         String?   // AI-generated follow-up or summary
  consultingDoctor String?  // list of consulting doctors' names

  // Relation back to Document
  document   Document @relation(fields: [documentId], references: [id])
  documentId String   @unique
}


model ADL {
  id               String   @id @default(cuid())
  adlsAffected     String
  workRestrictions String
  documentId       String   @unique
  document         Document @relation(fields: [documentId], references: [id])
}

model DocumentSummary {
  id         String   @id @default(cuid())
  type       String
  date       DateTime
  summary    String
  documentId String   @unique
  document   Document @relation(fields: [documentId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  email     String?
  action    String
  ipAddress String?
  userAgent String?
  path      String?
  method    String?
  timestamp DateTime @default(now())
}

model PatientQuiz {
  id              String   @id @default(cuid())
  patientName     String
  dob             String?
  doi             String?
  lang            String
  bodyAreas       String?
  newAppointments Json?
  refill          Json?
  adl             Json
  therapies       Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  claimNumber     String?

  @@map("patient_quizzes")
}

model FailDocs {
  id           String  @id @default(cuid())
  reason       String
  physicianId  String?
  claimNumber  String?
  documentText String?
  doi          String?
  patientName  String?
  blobPath     String?
  fileHash     String?
  fileName     String?
  gcsFileLink  String?
  dob          String?
}

model IntakeLink {
  id            String   @id @default(cuid())
  token         String   @unique
  patientName   String
  dateOfBirth   DateTime
  visitType     String   @default("Follow-up")
  language      String   @default("en")
  mode          String   @default("tele")
  bodyParts     String?
  expiresInDays Int      @default(7)
  requireAuth   Boolean  @default(true)
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  claimNumber   String?

  @@map("intake_links")
}

model Task {
  id             String    @id @default(cuid())
  description    String
  department     String
  status         String    @default("Pending")
  dueDate        DateTime?
  patient        String
  actions        String[]  @default(["Claim", "Complete"])
  sourceDocument String?
  quickNotes     Json?     @default("{\"details\": \"\", \"one_line_note\": \"\", \"status_update\": \"\"}")
  documentId     String?
  physicianId    String?
  reason         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  document       Document? @relation(fields: [documentId], references: [id])
}

model WorkflowStats {
  id                 String   @id @default(cuid())
  date               DateTime @default(now())
  referralsProcessed Int      @default(0)
  rfasMonitored      Int      @default(0)
  qmeUpcoming        Int      @default(0)
  payerDisputes      Int      @default(0)
  externalDocs       Int      @default(0)
  intakes_created    Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}


model Subscription {
  id           String   @id @default(cuid())
  physicianId  String
  plan         String   // 'basic', 'pro', 'premium'
  amountTotal  Int      // Amount in cents
  status       String   // 'active', 'canceled', 'past_due'
  stripeCustomerId String?
  stripeSubscriptionId String? // For recurring subscriptions
  documentParse    Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("subscriptions")
}

model CheckoutSession {
  id              String   @id @default(uuid())
  stripeSessionId String   @unique
  physicianId     String
  plan            String
  amount          Int
  status          String
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([stripeSessionId])
  @@index([physicianId])
}